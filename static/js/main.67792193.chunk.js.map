{"version":3,"sources":["actions/todos.js","components/TodoItem.js","components/TodoList.js","containers/Todos.js","components/Header.js","components/AddTodo.js","App.js","reducers/todos.js","store.js","serviceWorker.js","index.js"],"names":["ADD_TODO","TOGGLE_COMPLETE","DELETE_TODO","REQUEST_TODOS","RECEIVE_TODOS","FAIL_GETTING_TODOS","TODOS_URL","fetchTodos","dispatch","type","axios","get","then","res","todos","data","error","getStyle","completed","background","padding","borderBottom","textDecoration","TodoItem","_ref","todo","onTodoClick","delTodo","id","title","react_default","a","createElement","style","onChange","checked","onClick","float","className","aria-hidden","TodoList","this","props","getTodos","_this$props","deleteTodo","map","components_TodoItem","key","Component","newStateFromStoreToArr","Object","keys","Todos","connect","toggleTodo","delete","concat","headerStyle","color","textAlign","Header","AddTodoUI","_Component","_getPrototypeOf2","_this","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","onSubmit","e","preventDefault","addTodo","setState","target","value","inherits","createClass","display","name","flex","placeholder","AddTodo","text","post","App","components_Header","components_AddTodo","containers_Todos","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares","thunkMiddleware","enhancer","applyMiddleware","rootReducer","combineReducers","undefined","action","objectSpread","defineProperty","objectWithoutProperties","_toPropertyKey","newState","forEach","store","createStore","Boolean","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67792193.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const ADD_TODO = 'ADD_TODO';\r\nexport const TOGGLE_COMPLETE = 'TOGGLE_COMPLETE';\r\nexport const DELETE_TODO = 'DELETE_TODO';\r\nexport const REQUEST_TODOS = 'REQUEST_TODOS';\r\nexport const RECEIVE_TODOS = 'RECEIVE_TODOS';\r\nexport const FAIL_GETTING_TODOS = 'FAIL_GETTING_TODOS';\r\n\r\nexport function toggleTodo(id) {\r\n  return { type: TOGGLE_COMPLETE, id };\r\n}\r\n\r\nexport function requestTodos() {\r\n  return { type: REQUEST_TODOS };\r\n}\r\n\r\nexport function receiveTodos(todos) {\r\n  return { type: RECEIVE_TODOS, todos };\r\n}\r\n\r\nexport function failGettingTodos() {\r\n  return { type: FAIL_GETTING_TODOS };\r\n}\r\n\r\nconst TODOS_URL = 'https://jsonplaceholder.typicode.com/todos?_limit=10';\r\n\r\nexport function fetchTodos() {\r\n  // Thunk middleware knows how to handle functions.\r\n  // It passes the dispatch method as an argument to the function,\r\n  // thus making it able to dispatch actions itself.\r\n\r\n  return function(dispatch) {\r\n    // First dispatch: the app state is updated to inform\r\n    // that the API call is starting.\r\n\r\n    dispatch(requestTodos());\r\n\r\n    // The function called by the thunk middleware can return a value,\r\n    // that is passed on as the return value of the dispatch method.\r\n\r\n    // In this case, we return a promise to wait for.\r\n    // This is not required by thunk middleware, but it is convenient for us.\r\n\r\n    return axios\r\n      .get(TODOS_URL)\r\n      .then(\r\n        res => dispatch(receiveTodos(res.data)),\r\n        error => dispatch(failGettingTodos(error))\r\n      );\r\n  };\r\n}\r\n\r\nexport function addTodo(text) {\r\n  return function(dispatch) {\r\n    axios\r\n      .post('https://jsonplaceholder.typicode.com/todos', {\r\n        title: text,\r\n        completed: false,\r\n      })\r\n      // при добавлении нового todo, id всегда одинаковый, поэтому и перетирает последущие добавленые\r\n      .then(res => dispatch({ type: ADD_TODO, todo: res.data }));\r\n  };\r\n}\r\n\r\nexport function deleteTodo(id) {\r\n  return function(dispatch) {\r\n    axios\r\n      .delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\r\n      .then(res => dispatch({ type: DELETE_TODO, id }));\r\n  };\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst getStyle = completed => {\r\n  return {\r\n    background: '#F4F4F4',\r\n    padding: '10px',\r\n    borderBottom: '1px #ccc dotted',\r\n    textDecoration: completed ? 'line-through' : 'none',\r\n  };\r\n};\r\n\r\nexport const TodoItem = ({ todo, onTodoClick, delTodo }) => {\r\n  const { id, title, completed } = todo;\r\n  return (\r\n    <div style={getStyle(completed)}>\r\n      <p>\r\n        <input\r\n          type=\"checkbox\"\r\n          onChange={() => onTodoClick(id)}\r\n          checked={completed ? 'checked' : ''}\r\n        />{' '}\r\n        {title}\r\n        <button onClick={() => delTodo(id)} style={{ float: 'right' }}>\r\n          <i className=\"fa fa-trash\" aria-hidden=\"true\" />\r\n        </button>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.shape({}).isRequired,\r\n  onTodoClick: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoList extends Component {\r\n  // вызывается после рендеринга компонента\r\n   componentDidMount() {\r\n    this.props.getTodos();\r\n  }\r\n\r\n  render() {\r\n    const { todos, onTodoClick, deleteTodo } = this.props;\r\n    \r\n    return todos.map(todo => (\r\n      <TodoItem\r\n        key={todo.id}\r\n        todo={todo}\r\n        onTodoClick={onTodoClick}\r\n        delTodo={deleteTodo}\r\n      />\r\n    ));\r\n  }\r\n}\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  onTodoClick: PropTypes.func.isRequired,\r\n  deleteTodo: PropTypes.func.isRequired,\r\n  getTodos: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TodoList;\r\n","import { connect } from 'react-redux';\r\n\r\nimport { deleteTodo, toggleTodo, fetchTodos } from '../actions/todos';\r\nimport TodoList from '../components/TodoList';\r\n\r\nconst newStateFromStoreToArr = todos => Object.keys(todos).map(id => todos[id]);\r\n// автоматом после того как отработал action getTodos(), \r\n// его результат заносится в параметр\r\nconst mapStateToProps = ({ todos }) => {\r\n  \r\n  return {\r\n    todos: newStateFromStoreToArr(todos),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n  return {\r\n    onTodoClick: id => dispatch(toggleTodo(id)),\r\n    deleteTodo: id => dispatch(deleteTodo(id)),\r\n    getTodos: () => dispatch(fetchTodos()),\r\n  };\r\n};\r\n\r\n// connect позволяет связать хранилище и компонент\r\n// после того как отработал action из mapDispatchToProps\r\n// state из store попадёт в mapStateToProps !!!!!!!!!\r\n// отобразятся в this.props у component TodoList\r\nconst Todos = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoList);\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1>TodoList</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nconst headerStyle = {\r\n  background: '#333',\r\n  color: '#fff',\r\n  textAlign: 'center',\r\n  padding: '10px',\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { addTodo as addTodoAction } from '../actions/todos';\r\n\r\nexport class AddTodoUI extends Component {\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        // пушим todo в store\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({ title: '' });\r\n    }\r\n\r\n    onChange = (e) => this.setState({ title: e.target.value });\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{display: 'flex'}}>\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"title\"\r\n                    style={{flex: '10', padding: '5px'}}\r\n                    placeholder=\"Add Todo...\" \r\n                    value={this.state.title}\r\n                    onChange={this.onChange}\r\n                />\r\n                <input \r\n                    type=\"submit\"\r\n                    value=\"Submit\"\r\n                    className=\"btn\"\r\n                    style= {{flex: '1'}}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nAddTodoUI.propTypes = {\r\n    addTodo: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addTodo: title => {\r\n      dispatch(addTodoAction(title))\r\n    }\r\n  }\r\n}\r\n\r\n// connect позволяет связать хранилище и компонент\r\n// отобразится в this.props у component AddTodoUI\r\nconst AddTodo = connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(AddTodoUI)\r\n\r\n\r\nexport default AddTodo;\r\n","import React from 'react';\r\n\r\nimport Todos from './containers/Todos';\r\nimport Header from './components/Header';\r\nimport AddTodo from './components/AddTodo';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <div className=\"container\">\r\n      <Header />\r\n      <br />\r\n      <AddTodo />\r\n      <Todos />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import {\r\n  ADD_TODO,\r\n  TOGGLE_COMPLETE,\r\n  DELETE_TODO,\r\n  REQUEST_TODOS,\r\n  RECEIVE_TODOS,\r\n  FAIL_GETTING_TODOS,\r\n} from '../actions/todos';\r\n\r\nconst initialState = {};\r\n\r\nexport function todos(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_TODO:\r\n      return { ...state, [action.todo.id]: action.todo };\r\n    case TOGGLE_COMPLETE: {\r\n      const todo = state[action.id];\r\n      return { ...state, [action.id]: { ...todo, completed: !todo.completed } };\r\n    }\r\n    case DELETE_TODO: {\r\n      // delete - произвольное название - объект, кот. должен быть удалён\r\n      const { [action.id]: deleted, ...rest } = state;\r\n      return rest;\r\n    }\r\n    case REQUEST_TODOS: {\r\n      // TODO\r\n      return state;\r\n    }\r\n    case RECEIVE_TODOS: {\r\n      const newState = {};\r\n      action.todos.forEach(todo => (newState[todo.id] = todo));\r\n\r\n      return newState; // {1: todo1, 2: todo2, ...}\r\n    }\r\n    case FAIL_GETTING_TODOS: {\r\n      // TODO\r\n      return state;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, applyMiddleware, combineReducers, compose } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport { todos } from './reducers/todos';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst middlewares = [thunkMiddleware];\r\n// для actions \r\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\r\n// если много reducers их можно скомпоновать в 1 объект {todos: ..., ...}\r\nconst rootReducer = combineReducers({ todos });\r\n// у createStore есть метод dispatcher\r\nconst store = createStore(rootReducer, enhancer);\r\n\r\nexport default store;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport store from './store';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}